{"pageProps":{"posts":[{"title":"Github 이스터에그","link":"https://velog.io/@jwn4492/Github-%ED%94%84%EB%A1%9C%ED%95%84%EC%97%90-README.md-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0","pubDate":"Sun, 05 Jul 2020 00:14:08 GMT","content":"<p><img src=\"https://images.velog.io/images/jwn4492/post/59967ef6-4dab-4798-aa81-7d0f4c838f77/image.png\" alt=\"\"></p>\n<p>위 사진을 보면 <code>cjaewon/README.md</code> 에 자기소개가 있는 것을 알 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/4db851fc-eb51-4c23-8b9f-9195c7528bf5/image.png\" alt=\"\"></p>\n<p><code>cjaewon/README.md</code> 를 만드는 방법은 <code>username/username</code> 레포를 생성 후\nREADME.md 에 자기소개 또는 정보를 작성하면 된다.</p>\n<p>그 후 다시 프로필로 들어와 보면 위 처럼 수정이 된다.</p>\n","contentSnippet":"위 사진을 보면 cjaewon/README.md 에 자기소개가 있는 것을 알 수 있다.\n\ncjaewon/README.md 를 만드는 방법은 username/username 레포를 생성 후\nREADME.md 에 자기소개 또는 정보를 작성하면 된다.\n그 후 다시 프로필로 들어와 보면 위 처럼 수정이 된다.","guid":"https://velog.io/@jwn4492/Github-%ED%94%84%EB%A1%9C%ED%95%84%EC%97%90-README.md-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0","isoDate":"2020-07-05T00:14:08.000Z"},{"title":"🐦 \"serverless\" 로 날아다니기","link":"https://velog.io/@jwn4492/serverless-%EB%A1%9C-%EB%82%A0%EC%95%84%EB%8B%A4%EB%8B%88%EA%B8%B0","pubDate":"Sun, 21 Jun 2020 06:14:19 GMT","content":"<blockquote>\n<p>🍯 serverless 사용하면서 장점과 꿀팁, 삽질기를 정리한 글입니다.</p>\n</blockquote>\n<h2 id=\"시작에-앞서서\">시작에 앞서서</h2>\n<p><strong>serverless</strong> 는 동적으로 머신 자원을 활당하고 사용한 만큼 돈을 내는 클라우드 컴퓨팅 실행모델로 개발자는 \n서버에 대해 신경을 안 쓰고 개발이 가능하게 해주는 서비스 입니다.</p>\n<p>이 글에서는 <strong>AWS</strong> 람다와 서버리스 관리도구인 <strong>serverless</strong> 를 사용합니다.</p>\n<h2 id=\"serverless-를-도입하고-얻은-장점\">serverless 를 도입하고 얻은 장점</h2>\n<h3 id=\"💰-비용-절약\">💰 비용 절약</h3>\n<p>제가 운영하고 있는 챗봇 서비스는 하루에 약 200개 정도의 요청만 오는 아주 작은 서비스입니다.\n<strong>serverless</strong> 를 사용하기 전에는 <strong>GCP</strong> 에서 가장 낮은 사양인 <code>f1-micro( vCPU 1개, 0.6GB 메모리 )</code>\n에서 작동했습니다.</p>\n<p>매달 약 8000원 정도의 비용이였던 걸로 기억합니다. ( 프리티어 였... )\n이걸 서버리스로 옮겨 가격을 절감하고자 했고 비교적 서버리스를 잘 지원하고 있던 <strong>AWS</strong> 로 이사를 가기로\n결정했습니다. 그렇게 열심히 express 코드를 함수별로 나누어 <strong>serverless</strong> 에 올리니 프리티어를 제외하고 계산한 결과\n<code>(monthly): 0.03 USD</code> 라는 약 <strong>36원</strong> 이라는 어마어마한 낮은 가격으로 서비스를 운영 할 수 있었습니다.</p>\n<h3 id=\"🌟-완전-쉬운-배포\">🌟 완전 쉬운 배포</h3>\n<p>단지 가격의 장점만 생각하고 있던 저는 <strong>serverless</strong> 로 넘어와 왜 <strong>자동 배포</strong> 를 구축하는지 알게되었습니다.\n<code>sls deploy</code> 명령어 하나로 자동으로 배포가 되는 것을 보고 엄청 편했습니다.\n예전에는 컴퓨터 엔진을 사용할 때 <strong>ssh</strong>로 연결하고 <strong>github</strong> 에 올리고 <strong>clone</strong> 하고를 반복했는데\n명령어 한개로 자동으로 배포되니 업데이트도 잦아지면서 오류 해결도 빠르고 요청한 기능도 빠르게 만들고 배포하여 사용자의 만족도가 높아졌습니다.</p>\n<h3 id=\"📈-대시보드와-📄-로그\">📈 대시보드와 📄 로그</h3>\n<p>컴퓨터 엔진을 사용할때는 요청 수, 오류 발생, 응답 속도가 어떻게 되는지 확인 할 방법이 없었습니다.\n그러다가 <strong>serverless</strong> 로 넘어오니 밑에 사진처럼 한눈에 보여주니 서비스의 사용도랑 오류 수를 확인 할 수 있어서 편했습니다.</p>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/7d0166bb-ec33-4c50-9238-bde3d571896c/image.png\" alt=\"\"></p>\n<p>또한 전에는 pm2를 이용해서 <strong>로그</strong>를 남겼는데 로그를 확인해야 할때마다 ssh로 연결해야하는게 귀찮았고\nvim을 통해 로그를 보는게 불편했습니다. <strong>AWS lambda</strong> 에서는 로그를 출력하기만 해도 밑에 사진처럼 로그를 찍어주는게 편했습니다.</p>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/ff692369-459d-40ab-898c-6d0b8209133a/image.png\" alt=\"\"></p>\n<h2 id=\"얻은-단점\">얻은 단점...</h2>\n<h3 id=\"🔥-초기-지연-시간\">🔥 초기 지연 시간</h3>\n<p><strong>AWS lambda</strong> 는 요청이 연속적으로 오지 않으면 <strong>Cold</strong> 상태가 되어 <strong>Response</strong> 늦어지는 경우가 발생하기도 하였습니다. 언어별로 다르긴 하지만 Node.js 는 빠른편이여서 신경 쓸 정도는 아니였습니다.</p>\n<h2 id=\"꿀팁\">꿀팁</h2>\n<h3 id=\"📦-webpack\">📦 webpack</h3>\n<p>타입스크립트를 사용하거나 실행속도를 빠르게 하고 싶다면 <strong>webpack</strong> 을 사용하면 좋습니다.\n원래 백엔드는 따로 코드 압축이 필요없었지만 람다는 따로따로 실행하기 때문에 webpack을 사용해서 코드 읽는 시간을 단축시켜 전보다 빠른 실행이 가능합니다.</p>\n<p><strong>serverless</strong> 플러그인인 <a href=\"https://github.com/serverless-heaven/serverless-webpack\">serverless-webpack</a> 을 사용하면 됩니다.</p>\n<h3 id=\"🌎-serverless-http\">🌎 serverless-http</h3>\n<blockquote>\n<p><strong>TMI</strong> velog도 <code>serverless-http</code>를 사용하고 있어요! </p>\n</blockquote>\n<p><strong>serverless</strong> 핸들러를 하나하나식 작성하게 되면 생산성 하락, 함수 개수 제한 및 플랫폼에 종속되기 때문에 다른 클라우드로 이사를 갈때 다시 작성해야 할 경우도 발생합니다.</p>\n<p>이럴 때 <strong>servereless</strong> 를 <code>express</code>, <code>koa</code> 같은 프레임워크를 사용 할 수 있는 방법이 있는데요\n<a href=\"https://github.com/dougmoscrop/serverless-http\">serverless-http</a> 를 사용하면 가능합니다</p>\n<pre><code class=\"language-ts\">// src/serverless.ts\nimport serverless from &#39;serverless-http&#39;;\nimport { APIGatewayProxyHandler } from &#39;aws-lambda&#39;;\n\nimport app from &#39;./app&#39;;\n\nconst serverlessApp = serverless(app);\n\nexport const handler: APIGatewayProxyHandler = async(event, context) =&gt; {\n  const response = await serverlessApp(event, context);\n\n  return response;\n};</code></pre>\n<pre><code class=\"language-yml\"># serverless.yml\n\nfunctions:\n  app:\n    handler: src/serverless.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{any+}\n          method: ANY</code></pre>\n<p>위 코드같이 사용하면 <code>express</code>, <code>koa</code>를 사용하면서도 <strong>serverelss</strong>를 사용 할 수 있게 됩니다.</p>\n<p>( + express 는 사용하기 무겁다는 평가도 존재하고 koa보다 느립니다. 따라서 실행시간에 비례해 가격이 측정되는 <strong>serverless</strong> 에서는 koa.js 를 사용하는게 좋습니다. ) </p>\n<h2 id=\"정리\">정리</h2>\n<p>위 같은 장단점이 있습니다. 저는 개인적으로 <strong>websocket</strong> 계속 연결해야 하는 일이 \n아니면 <strong>serverless</strong> 사용을 추천드립니다!</p>\n<p><strong>더 읽어보기</strong></p>\n<ul>\n<li><a href=\"https://blog.rocketpunch.com/2017/07/02/2-million-pv-with-300-krw/\">300원에 200만뷰 소화하기 – 서버리스 아키텍처 AWS 람다(Lambda) 활용 사례</a></li>\n<li><a href=\"https://medium.com/harrythegreat/aws-lambda%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%98%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EC%95%98%EC%9D%84%EA%B2%83%EB%93%A4-788bd3b3bdd2\">AWS Lambda를 시작하기 전 알았으면 좋았을것들</a></li>\n</ul>\n","contentSnippet":"🍯 serverless 사용하면서 장점과 꿀팁, 삽질기를 정리한 글입니다.\n시작에 앞서서\nserverless 는 동적으로 머신 자원을 활당하고 사용한 만큼 돈을 내는 클라우드 컴퓨팅 실행모델로 개발자는 \n서버에 대해 신경을 안 쓰고 개발이 가능하게 해주는 서비스 입니다.\n이 글에서는 AWS 람다와 서버리스 관리도구인 serverless 를 사용합니다.\nserverless 를 도입하고 얻은 장점\n💰 비용 절약\n제가 운영하고 있는 챗봇 서비스는 하루에 약 200개 정도의 요청만 오는 아주 작은 서비스입니다.\nserverless 를 사용하기 전에는 GCP 에서 가장 낮은 사양인 f1-micro( vCPU 1개, 0.6GB 메모리 )\n에서 작동했습니다.\n매달 약 8000원 정도의 비용이였던 걸로 기억합니다. ( 프리티어 였... )\n이걸 서버리스로 옮겨 가격을 절감하고자 했고 비교적 서버리스를 잘 지원하고 있던 AWS 로 이사를 가기로\n결정했습니다. 그렇게 열심히 express 코드를 함수별로 나누어 serverless 에 올리니 프리티어를 제외하고 계산한 결과\n(monthly): 0.03 USD 라는 약 36원 이라는 어마어마한 낮은 가격으로 서비스를 운영 할 수 있었습니다.\n🌟 완전 쉬운 배포\n단지 가격의 장점만 생각하고 있던 저는 serverless 로 넘어와 왜 자동 배포 를 구축하는지 알게되었습니다.\nsls deploy 명령어 하나로 자동으로 배포가 되는 것을 보고 엄청 편했습니다.\n예전에는 컴퓨터 엔진을 사용할 때 ssh로 연결하고 github 에 올리고 clone 하고를 반복했는데\n명령어 한개로 자동으로 배포되니 업데이트도 잦아지면서 오류 해결도 빠르고 요청한 기능도 빠르게 만들고 배포하여 사용자의 만족도가 높아졌습니다.\n📈 대시보드와 📄 로그\n컴퓨터 엔진을 사용할때는 요청 수, 오류 발생, 응답 속도가 어떻게 되는지 확인 할 방법이 없었습니다.\n그러다가 serverless 로 넘어오니 밑에 사진처럼 한눈에 보여주니 서비스의 사용도랑 오류 수를 확인 할 수 있어서 편했습니다.\n\n또한 전에는 pm2를 이용해서 로그를 남겼는데 로그를 확인해야 할때마다 ssh로 연결해야하는게 귀찮았고\nvim을 통해 로그를 보는게 불편했습니다. AWS lambda 에서는 로그를 출력하기만 해도 밑에 사진처럼 로그를 찍어주는게 편했습니다.\n\n얻은 단점...\n🔥 초기 지연 시간\nAWS lambda 는 요청이 연속적으로 오지 않으면 Cold 상태가 되어 Response 늦어지는 경우가 발생하기도 하였습니다. 언어별로 다르긴 하지만 Node.js 는 빠른편이여서 신경 쓸 정도는 아니였습니다.\n꿀팁\n📦 webpack\n타입스크립트를 사용하거나 실행속도를 빠르게 하고 싶다면 webpack 을 사용하면 좋습니다.\n원래 백엔드는 따로 코드 압축이 필요없었지만 람다는 따로따로 실행하기 때문에 webpack을 사용해서 코드 읽는 시간을 단축시켜 전보다 빠른 실행이 가능합니다.\nserverless 플러그인인 serverless-webpack 을 사용하면 됩니다.\n🌎 serverless-http\nTMI velog도 serverless-http를 사용하고 있어요! \nserverless 핸들러를 하나하나식 작성하게 되면 생산성 하락, 함수 개수 제한 및 플랫폼에 종속되기 때문에 다른 클라우드로 이사를 갈때 다시 작성해야 할 경우도 발생합니다.\n이럴 때 servereless 를 express, koa 같은 프레임워크를 사용 할 수 있는 방법이 있는데요\nserverless-http 를 사용하면 가능합니다\n// src/serverless.ts\nimport serverless from 'serverless-http';\nimport { APIGatewayProxyHandler } from 'aws-lambda';\n\nimport app from './app';\n\nconst serverlessApp = serverless(app);\n\nexport const handler: APIGatewayProxyHandler = async(event, context) => {\n  const response = await serverlessApp(event, context);\n\n  return response;\n};\n# serverless.yml\n\nfunctions:\n  app:\n    handler: src/serverless.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{any+}\n          method: ANY\n위 코드같이 사용하면 express, koa를 사용하면서도 serverelss를 사용 할 수 있게 됩니다.\n( + express 는 사용하기 무겁다는 평가도 존재하고 koa보다 느립니다. 따라서 실행시간에 비례해 가격이 측정되는 serverless 에서는 koa.js 를 사용하는게 좋습니다. ) \n정리\n위 같은 장단점이 있습니다. 저는 개인적으로 websocket 계속 연결해야 하는 일이 \n아니면 serverless 사용을 추천드립니다!\n더 읽어보기\n300원에 200만뷰 소화하기 – 서버리스 아키텍처 AWS 람다(Lambda) 활용 사례\nAWS Lambda를 시작하기 전 알았으면 좋았을것들","guid":"https://velog.io/@jwn4492/serverless-%EB%A1%9C-%EB%82%A0%EC%95%84%EB%8B%A4%EB%8B%88%EA%B8%B0","isoDate":"2020-06-21T06:14:19.000Z"},{"title":"Github Action으로 매일마다 브리핑 받기!","link":"https://velog.io/@jwn4492/Github-Action%EC%9C%BC%EB%A1%9C-%EB%A7%A4%EC%9D%BC%EB%A7%88%EB%8B%A4-%EB%B8%8C%EB%A6%AC%ED%95%91-%EB%B0%9B%EA%B8%B0","pubDate":"Mon, 23 Mar 2020 05:23:11 GMT","content":"<h3 id=\"매일마다-브리핑을-해주는-뉴스봇을-깃허브-액션으로-만들어보기\">매일마다 브리핑을 해주는 뉴스봇을 깃허브 액션으로 만들어보기</h3>\n<h2 id=\"google-app-script-로-개발\">Google App Script 로 개발...!</h2>\n<p><code>구글 앱 스크립트</code>는 간단한 응용 프로그램 개발을 위해 Google에서 개발한 스크립팅 플랫폼이다.\n앱 스크립트는 문법이 자바스크립트이고 거의 무료여서 사용하기 편하다고 생각해서 사용하게 되었다.</p>\n<p><del>어...? 최신 자바스크립트 문법을 사용할 수 없었다</del></p>\n<p>무료를 좋아하는 나한테는 어쩔 수 없이 개발을 진행하게되었다.\n그렇게 어쩌다보니 개발을 다 완료하고 트리거로 매일 8시에 알람이 오게 하였다.</p>\n<p>GAE 플랫폼에서 돌아가는 특성상 오류를 잡기 힘들고 npm 모듈을 사용 할 수 없어서 그냥 람다 또는 파이어베이스의 function 을 사용할려고 햇다.</p>\n<h2 id=\"github-action-을-쓰자\">Github Action 을 쓰자!</h2>\n<p><a href=\"https://ahnheejong.name/articles/receive-new-room-notification-mails-using-github-action/\">이 글을</a> 보고 처음 <code>Github Action</code>을 알게되었고 바로 쓰면 좋을 것 같다는 생각이 들었다.</p>\n<p>자신이 원하는 프로그래밍 언어로 작업을 할 수 있는게 매력적으로 느껴졌다.\n그렇게 <code>앱 스크립트</code>를 버리고 <code>Github Action</code>을 사용하는김에 코드를 다 최신 문법으로 바꾸고 <code>타입스크립트를</code> 적용시켰다.</p>\n<h3 id=\"1-웹-파싱을-하자\">1. 웹 파싱을 하자</h3>\n<h4 id=\"날씨\">날씨</h4>\n<p>봇은 날씨, 온도, 뉴스 등을 보내주기 위해서는 데이터를 파싱해야했다.\n날씨와 온도는 <a href=\"https://openweathermap.org/api\">Weather Api</a> 를 사용해서 가져오기로 했다. 다만 Wetaher Api에는 한가지 문제점이 있는데 결과값이 영어라는 점이다.\n그래서 날씨 코드를 이용해서 한글로 변환해주어한다 그래서 <code>json</code> 파일로 저장 후 날씨 코드를 이용해서 한글로 된 날씨 데이터로 가공하였다.\n<img src=\"https://images.velog.io/images/jwn4492/post/bd3d327f-c667-450e-a594-08677c25b92f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-03-23%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.15.08.png\" alt=\"\"></p>\n<h4 id=\"뉴스\">뉴스</h4>\n<p>그 다음은 뉴스를 파싱해야했다. 네이버 뉴스, 다음 뉴스, 구글 뉴스 등이 있었는데 \n나는 그 중 구글 뉴스를 파싱했다.\n<a href=\"https://news.google.com/rss?hl=ko&amp;gl=KR&amp;ceid=KR:ko\">https://news.google.com/rss?hl=ko&amp;gl=KR&amp;ceid=KR:ko</a>\n해당 사이트에서 <code>axios</code>를 사용하여 가져온 후 <code>cheerio</code>를 사용하여 제목과 url을 파싱했다.\n<img src=\"https://images.velog.io/images/jwn4492/post/d58282b8-5800-4b56-931a-c13b21c7a234/image.png\" alt=\"\"></p>\n<h3 id=\"2-웹훅으로-전송\">2. 웹훅으로 전송</h3>\n<p>일단 웹훅으로 전송하기 위해서는 웹훅 url이 필요했는데 이 url을 저장할 방법이 고민이었다.\n웹훅 url은 공개되면 안 되는 정보였으므로 비밀스럽게 보관해야 했다.</p>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/ac41048d-9846-4efa-b9f1-460595f0f8ea/image.png\" alt=\"\">\n방법을 찾는 도중에 <code>깃헙 secrets</code>에 보관이 가능하다는 것을 알고 설정을 하고 <code>nodejs.yml</code>에 추가해주었더니 \n<code>process.env</code>로 바로 가져올 수 있었다 :)</p>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/14d0da73-3a46-42ba-a619-f632db5f58c4/image.png\" alt=\"\"></p>\n<p>그렇게 파싱한 정보를 매일 아침 8시에 웹훅으로 보내게 하였다.</p>\n<h2 id=\"결과\">결과</h2>\n<h3 id=\"디스코드-웹훅\">디스코드 웹훅</h3>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/35610fa7-e22f-4ac6-862a-d7834ec84c23/image.png\" alt=\"\"></p>\n<h3 id=\"슬랙-웹훅\">슬랙 웹훅</h3>\n<p><img src=\"https://images.velog.io/images/jwn4492/post/45fcb40e-fd91-4275-a001-eef7c2a96558/image.png\" alt=\"\"></p>\n<p>이렇게 <code>Github Action</code>으로 편지봇을 만들어 보았다.\n<code>Github Action</code>을 처음 사용해보았는데 매우 좋았고 사용할 기회가 있으면 사용할 것 이다.</p>\n<p>또한 <code>Github Action</code>을 활용한다면 여러가지 작업을 할 수 있다  ( 배포, 테스트 등)  </p>\n  <a href=\"https://github.com/cjaewon/letterbot\">\n    https://github.com/cjaewon/letterbot\n  </a>\n\n<p><img src=\"https://images.velog.io/images/jwn4492/post/9d629978-fc40-41de-a3aa-c4111a5d8018/image.png\" alt=\"\"></p>\n<p>긴글 읽어주셔서 감사합니다!</p>\n","contentSnippet":"매일마다 브리핑을 해주는 뉴스봇을 깃허브 액션으로 만들어보기\nGoogle App Script 로 개발...!\n구글 앱 스크립트는 간단한 응용 프로그램 개발을 위해 Google에서 개발한 스크립팅 플랫폼이다.\n앱 스크립트는 문법이 자바스크립트이고 거의 무료여서 사용하기 편하다고 생각해서 사용하게 되었다.\n어...? 최신 자바스크립트 문법을 사용할 수 없었다\n무료를 좋아하는 나한테는 어쩔 수 없이 개발을 진행하게되었다.\n그렇게 어쩌다보니 개발을 다 완료하고 트리거로 매일 8시에 알람이 오게 하였다.\nGAE 플랫폼에서 돌아가는 특성상 오류를 잡기 힘들고 npm 모듈을 사용 할 수 없어서 그냥 람다 또는 파이어베이스의 function 을 사용할려고 햇다.\nGithub Action 을 쓰자!\n이 글을 보고 처음 Github Action을 알게되었고 바로 쓰면 좋을 것 같다는 생각이 들었다.\n자신이 원하는 프로그래밍 언어로 작업을 할 수 있는게 매력적으로 느껴졌다.\n그렇게 앱 스크립트를 버리고 Github Action을 사용하는김에 코드를 다 최신 문법으로 바꾸고 타입스크립트를 적용시켰다.\n1. 웹 파싱을 하자\n날씨\n봇은 날씨, 온도, 뉴스 등을 보내주기 위해서는 데이터를 파싱해야했다.\n날씨와 온도는 Weather Api 를 사용해서 가져오기로 했다. 다만 Wetaher Api에는 한가지 문제점이 있는데 결과값이 영어라는 점이다.\n그래서 날씨 코드를 이용해서 한글로 변환해주어한다 그래서 json 파일로 저장 후 날씨 코드를 이용해서 한글로 된 날씨 데이터로 가공하였다.\n\n뉴스\n그 다음은 뉴스를 파싱해야했다. 네이버 뉴스, 다음 뉴스, 구글 뉴스 등이 있었는데 \n나는 그 중 구글 뉴스를 파싱했다.\nhttps://news.google.com/rss?hl=ko&gl=KR&ceid=KR:ko\n해당 사이트에서 axios를 사용하여 가져온 후 cheerio를 사용하여 제목과 url을 파싱했다.\n\n2. 웹훅으로 전송\n일단 웹훅으로 전송하기 위해서는 웹훅 url이 필요했는데 이 url을 저장할 방법이 고민이었다.\n웹훅 url은 공개되면 안 되는 정보였으므로 비밀스럽게 보관해야 했다.\n\n방법을 찾는 도중에 깃헙 secrets에 보관이 가능하다는 것을 알고 설정을 하고 nodejs.yml에 추가해주었더니 \nprocess.env로 바로 가져올 수 있었다 :)\n\n그렇게 파싱한 정보를 매일 아침 8시에 웹훅으로 보내게 하였다.\n결과\n디스코드 웹훅\n\n슬랙 웹훅\n\n이렇게 Github Action으로 편지봇을 만들어 보았다.\nGithub Action을 처음 사용해보았는데 매우 좋았고 사용할 기회가 있으면 사용할 것 이다.\n또한 Github Action을 활용한다면 여러가지 작업을 할 수 있다  ( 배포, 테스트 등)  \n\n긴글 읽어주셔서 감사합니다!","guid":"https://velog.io/@jwn4492/Github-Action%EC%9C%BC%EB%A1%9C-%EB%A7%A4%EC%9D%BC%EB%A7%88%EB%8B%A4-%EB%B8%8C%EB%A6%AC%ED%95%91-%EB%B0%9B%EA%B8%B0","isoDate":"2020-03-23T05:23:11.000Z"}]},"__N_SSG":true}